C This file contains cog templates.
C Code between template and end marker is autogenerated.
C
CCOG[[[cog import cog; from check import *]]]
CCOG[[[end]]] (checksum: d41d8cd98f00b204e9800998ecf8427e)

#include "GUD_OPTIONS.h"

C---+----1----+----2----+----3----+----4----+----5----+----6----+----7-|--+----|
CBOP 0
C     !ROUTINE: GUD_CHECK

C     !INTERFACE:
      SUBROUTINE GUD_CHECK( myThid )

C     !DESCRIPTION:
C     Check dependences with other packages:
C     o Print gud indices (iDIC,...) and ptracer names
C     o to allow for manual check

C     !USES:
      IMPLICIT NONE
#include "SIZE.h"
#include "EEPARAMS.h"
#include "PARAMS.h"
#include "PTRACERS_SIZE.h"
#include "PTRACERS_PARAMS.h"
#include "GCHEM.h"
#include "GUD_SIZE.h"
#include "GUD_INDICES.h"
#include "GUD_GENPARAMS.h"
#include "GUD_TRAITS.h"

C     !INPUT PARAMETERS:
C     myThid -  Number of this instances
      INTEGER myThid
CEOP

#ifdef ALLOW_GUD

C     !LOCAL VARIABLES:
C     msgBuf      - Informational/error meesage buffer
      CHARACTER*(MAX_LEN_MBUF) msgBuf
      INTEGER j,jz,iPtr

      _BEGIN_MASTER(myThid)

      WRITE(msgBuf,'(A)') 'GUD_CHECK: #define ALLOW_GUD'
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

C check exf is compiled and used
#ifdef ALLOW_EXF
      IF ( .NOT. useEXF ) THEN
#else
      IF (.TRUE.) THEN
#endif
        WRITE(msgBuf,'(A)')
     & 'GUD_CHECK: ERROR: gud requires the exf package to be on'
        CALL PRINT_ERROR( msgBuf , 1)
        STOP 'ABNORMAL END: S/R GUD_CHECK'
      ENDIF

      IF ( nGud .GT. PTRACERS_num ) THEN
        WRITE(msgBuf,'(A,I5,A,I5)')
     &    'GUD_CHECK: ERROR: nGud > PTRACERS_num: ',
     &    nGud,' vs ',PTRACERS_num
        CALL PRINT_ERROR( msgBuf , 1)
        STOP 'ABNORMAL END: S/R GUD_CHECK'
      ENDIF

C check all required palat are set
      DO jz=iMinPred,iMaxPred
       DO j=iMinPrey,iMaxPrey
        IF (palat(j,jz) .LT. 0.0 _d 0) THEN
         WRITE(msgBuf,'(A,I5,A,I5)')
     &    'GUD_CHECK: ERROR: palat negative for pred ',jz,' prey ',j
         CALL PRINT_ERROR( msgBuf , 1)
         STOP 'ABNORMAL END: S/R GUD_CHECK'
        ENDIF
       ENDDO
      ENDDO

C check we are not using hollexp and also inhib_graz or GUD_GRAZING_SWITCH
      IF (hollexp .NE. 1.0 _d 0) THEN
        IF (inhib_graz_exp .NE. 0) THEN
          WRITE(msgBuf,'(2A)') 'GUD_CHECK: ERROR: ',
     &    'hollexp.NE.1 and inhib_graz_exp should not be used together'
          CALL PRINT_ERROR( msgBuf , 1)
          STOP 'ABNORMAL END: S/R GUD_CHECK'
        ENDIF
#ifdef GUD_GRAZING_SWITCH
        WRITE(msgBuf,'(2A)') 'GUD_CHECK: ERROR: ',
     & 'hollexp.NE.1 and GUD_GRAZING_SWITCH should not be used together'
        CALL PRINT_ERROR( msgBuf , 1)
        STOP 'ABNORMAL END: S/R GUD_CHECK'
#endif
      ENDIF

C log tracer names together with what they should be
      WRITE(msgBuf,'(A)') 'GUD_CHECK: iPtr gud       PTRACERS_names'
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)
CCOG[[[cog
CCOGfor name,name6,cond1,cond2 in checkflds: cog.out('''
CCOG{cond1}      WRITE(msgBuf,'(A,I4,X,A,A32)') 'GUD_CHECK: ',
CCOG     &  i{name6},'{name6}    ', PTRACERS_names(i{name6})
CCOG      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
CCOG     &                   SQUEEZE_RIGHT,myThid)
CCOG{cond2}'''.format(name=name, name6=name6, cond1=cond1, cond2=cond2))
CCOGfor name,name5,cond1,cond2 in checklflds: cog.out('''
CCOG{cond1}      DO j = 1, e{name}+1-i{name}
CCOG        iPtr = i{name} + j - 1
CCOG        WRITE(msgBuf,'(A,I4,X,A,I4,X,A32)') 'GUD_CHECK: ',
CCOG     &    iPtr, '{name5}', j, PTRACERS_names(iPtr)
CCOG        CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
CCOG     &                     SQUEEZE_RIGHT,myThid)
CCOG      ENDDO
CCOG{cond2}'''.format(name=name, name5=name5, cond1=cond1, cond2=cond2))
CCOG]]]

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'GUD_CHECK: ',
     &  iDIC   ,'DIC       ', PTRACERS_names(iDIC   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'GUD_CHECK: ',
     &  iNH4   ,'NH4       ', PTRACERS_names(iNH4   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'GUD_CHECK: ',
     &  iNO2   ,'NO2       ', PTRACERS_names(iNO2   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'GUD_CHECK: ',
     &  iNO3   ,'NO3       ', PTRACERS_names(iNO3   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'GUD_CHECK: ',
     &  iPO4   ,'PO4       ', PTRACERS_names(iPO4   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'GUD_CHECK: ',
     &  iSiO2  ,'SiO2      ', PTRACERS_names(iSiO2  )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'GUD_CHECK: ',
     &  iFeT   ,'FeT       ', PTRACERS_names(iFeT   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'GUD_CHECK: ',
     &  iDOC   ,'DOC       ', PTRACERS_names(iDOC   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'GUD_CHECK: ',
     &  iDON   ,'DON       ', PTRACERS_names(iDON   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'GUD_CHECK: ',
     &  iDOP   ,'DOP       ', PTRACERS_names(iDOP   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'GUD_CHECK: ',
     &  iDOFe  ,'DOFe      ', PTRACERS_names(iDOFe  )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'GUD_CHECK: ',
     &  iPOC   ,'POC       ', PTRACERS_names(iPOC   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'GUD_CHECK: ',
     &  iPON   ,'PON       ', PTRACERS_names(iPON   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'GUD_CHECK: ',
     &  iPOP   ,'POP       ', PTRACERS_names(iPOP   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'GUD_CHECK: ',
     &  iPOSi  ,'POSi      ', PTRACERS_names(iPOSi  )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'GUD_CHECK: ',
     &  iPOFe  ,'POFe      ', PTRACERS_names(iPOFe  )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

      WRITE(msgBuf,'(A,I4,X,A,A32)') 'GUD_CHECK: ',
     &  iPIC   ,'PIC       ', PTRACERS_names(iPIC   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)

#ifdef GUD_ALLOW_CARBON
      WRITE(msgBuf,'(A,I4,X,A,A32)') 'GUD_CHECK: ',
     &  iALK   ,'ALK       ', PTRACERS_names(iALK   )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)
#endif

#ifdef GUD_ALLOW_CARBON
      WRITE(msgBuf,'(A,I4,X,A,A32)') 'GUD_CHECK: ',
     &  iO2    ,'O2        ', PTRACERS_names(iO2    )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)
#endif

#ifdef GUD_ALLOW_CDOM
      WRITE(msgBuf,'(A,I4,X,A,A32)') 'GUD_CHECK: ',
     &  iCDOM  ,'CDOM      ', PTRACERS_names(iCDOM  )
      CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                   SQUEEZE_RIGHT,myThid)
#endif

#ifdef GUD_ALLOW_CDOM
      DO j = 1, ec+1-ic
        iPtr = ic + j - 1
        WRITE(msgBuf,'(A,I4,X,A,I4,X,A32)') 'GUD_CHECK: ',
     &    iPtr, 'c    ', j, PTRACERS_names(iPtr)
        CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                     SQUEEZE_RIGHT,myThid)
      ENDDO
#endif

      DO j = 1, en+1-in
        iPtr = in + j - 1
        WRITE(msgBuf,'(A,I4,X,A,I4,X,A32)') 'GUD_CHECK: ',
     &    iPtr, 'n    ', j, PTRACERS_names(iPtr)
        CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                     SQUEEZE_RIGHT,myThid)
      ENDDO

      DO j = 1, ep+1-ip
        iPtr = ip + j - 1
        WRITE(msgBuf,'(A,I4,X,A,I4,X,A32)') 'GUD_CHECK: ',
     &    iPtr, 'p    ', j, PTRACERS_names(iPtr)
        CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                     SQUEEZE_RIGHT,myThid)
      ENDDO

      DO j = 1, efe+1-ife
        iPtr = ife + j - 1
        WRITE(msgBuf,'(A,I4,X,A,I4,X,A32)') 'GUD_CHECK: ',
     &    iPtr, 'fe   ', j, PTRACERS_names(iPtr)
        CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                     SQUEEZE_RIGHT,myThid)
      ENDDO

      DO j = 1, esi+1-isi
        iPtr = isi + j - 1
        WRITE(msgBuf,'(A,I4,X,A,I4,X,A32)') 'GUD_CHECK: ',
     &    iPtr, 'si   ', j, PTRACERS_names(iPtr)
        CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                     SQUEEZE_RIGHT,myThid)
      ENDDO

      DO j = 1, eChl+1-iChl
        iPtr = iChl + j - 1
        WRITE(msgBuf,'(A,I4,X,A,I4,X,A32)') 'GUD_CHECK: ',
     &    iPtr, 'Chl  ', j, PTRACERS_names(iPtr)
        CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                     SQUEEZE_RIGHT,myThid)
      ENDDO

      DO j = 1, efat+1-ifat
        iPtr = ifat + j - 1
        WRITE(msgBuf,'(A,I4,X,A,I4,X,A32)') 'GUD_CHECK: ',
     &    iPtr, 'fat  ', j, PTRACERS_names(iPtr)
        CALL PRINT_MESSAGE(msgBuf,standardMessageUnit,
     &                     SQUEEZE_RIGHT,myThid)
      ENDDO
CCOG[[[end]]] (checksum: 785536718a5215518531d093bc7f5540)

      _END_MASTER(myThid)

#endif /* ALLOW_GUD */

      RETURN
      END

