C This file contains cog templates.
C Code between template and end marker is autogenerated.
C Add new parameters to params.py
C
CCOG[[[cog import cog; from params import *]]]
CCOG[[[end]]] (checksum: d41d8cd98f00b204e9800998ecf8427e)

#include "GUD_OPTIONS.h"

      SUBROUTINE GUD_READGENPARAMS(iUnit,oUnit,myThid)
      IMPLICIT NONE
#include "SIZE.h"
#include "EEPARAMS.h"
#include "PARAMS.h"
#include "GUD_SIZE.h"
#include "GUD_GENPARAMS.h"

      CHARACTER*(MAX_LEN_MBUF) msgBuf
      INTEGER iUnit,oUnit,myThid

#ifdef ALLOW_GUD

CCOG[[[cog
CCOGfor name,(nml,conds,conde) in nmls.items():
CCOG    cog.out(conds)
CCOG    cog.out('''
CCOG      NAMELIST/{name}/
CCOG    '''.format(name=name)[1:])
CCOG    cog.out(',\n'.join('''
CCOG{pre}     &    {param}
CCOG{post}'''.format(param=param, pre=pre, post=post)[1:-1] for tp,dims,param,pre,post in nml)[4:])
CCOG    cog.out('\n')
CCOG    cog.out(conde)
CCOG    cog.out('\n')
CCOG]]]
      NAMELIST/GUD_CONSTANTS/
     &    rad2deg

#ifdef GUD_ALLOW_CARBON
      NAMELIST/CARBON_CONSTANTS/
     &    Pa2Atm,
     &    ptr2mol,
     &    sca1,
     &    sca2,
     &    sca3,
     &    sca4,
     &    sox1,
     &    sox2,
     &    sox3,
     &    sox4,
     &    oA0,
     &    oA1,
     &    oA2,
     &    oA3,
     &    oA4,
     &    oA5,
     &    oB0,
     &    oB1,
     &    oB2,
     &    oB3,
     &    oC0
#endif

      NAMELIST/GUD_PARAMS/
     &    gud_seed,
     &    iDEBUG,
     &    jDEBUG,
     &    kDEBUG,
     &    gud_linFSConserve,
     &    gud_read_phos,
     &    phymin,
     &    katten_w,
     &    katten_chl,
     &    parfrac,
     &    parconv,
     &    tempnorm,
     &    TempAeArr,
     &    TemprefArr,
     &    TempCoeffArr,
     &    alpfe,
     &    scav,
     &    ligand_tot,
     &    ligand_stab,
     &    freefemax,
     &    scav_rat,
     &    scav_inter,
     &    scav_exp,
     &    scav_R_POPPOC,
     &    depthfesed,
     &    fesedflux,
     &    fesedflux_pcm,
     &    R_CP_fesed,
     &    Knita,
     &    Knitb,
     &    PAR_oxi,
     &    Kdoc,
     &    Kdop,
     &    Kdon,
     &    KdoFe,
     &    KPOC,
     &    KPOP,
     &    KPON,
     &    KPOFe,
     &    KPOSi,
     &    wC_sink,
     &    wP_sink,
     &    wN_sink,
     &    wFe_sink,
     &    wSi_sink,
     &    wPIC_sink,
     &    Kdissc,
#ifdef GUD_ALLOW_CARBON
     &    gud_atmos_pCO2,
     &    R_OP,
     &    R_OC,
     &    m3perkg,
     &    surfSaltMinInit,
     &    surfSaltMaxInit,
     &    surfTempMinInit,
     &    surfTempMaxInit,
     &    surfDICMinInit,
     &    surfDICMaxInit,
     &    surfALKMinInit,
     &    surfALKMaxInit,
     &    surfPO4MinInit,
     &    surfPO4MaxInit,
     &    surfSiMinInit,
     &    surfSiMaxInit,
     &    surfSaltMin,
     &    surfSaltMax,
     &    surfTempMin,
     &    surfTempMax,
     &    surfDICMin,
     &    surfDICMax,
     &    surfALKMin,
     &    surfALKMax,
     &    surfPO4Min,
     &    surfPO4Max,
     &    surfSiMin,
     &    surfSiMax,
#endif
     &    diaz_ini_fac,
     &    O2crit,
     &    denit_NP,
     &    denit_NO3,
     &    NO3crit,
     &    PARmin,
     &    chl2nmax,
     &    synthcost,
     &    expPref,
     &    expPalat,
     &    palat_min,
     &    inhib_graz,
     &    inhib_graz_exp,
     &    hillnum,
     &    hollexp,
     &    phygrazmin,
     &    pmaxPON,
     &    pmaxDON,
     &    pcoefO2,
     &    pmaxDIN,
     &    ksatPOM,
     &    ksatDOM,
     &    ksatDIN,
     &    alpha_hydrol,
     &    yod,
     &    yoe,
     &    ynd,
     &    yne,
     &    fnh4,
     &    ynh4,
     &    yonh4,
     &    fno2,
     &    yno2,
     &    yono2,
     &    depthdenit

#ifdef GUD_ALLOW_RADTRANS
      NAMELIST/GUD_RADTRANS_PARAMS/
     &    gud_waterAbsorbFile,
     &    gud_phytoAbsorbFile,
     &    gud_particleAbsorbFile,
     &    gud_selectSolz,
     &    gud_refract_water,
     &    gud_rmud_max,
     &    gud_radtrans_kmax,
     &    gud_part_size_P,
     &    gud_waveband_edges,
     &    gud_waveband_centers,
     &    gud_radmodThresh,
     &    gud_rmus,
     &    gud_rmuu,
     &    gud_bbmin,
     &    gud_bbw,
     &    gud_lambda_aCDOM,
     &    gud_Sdom,
     &    gud_aCDOM_fac,
     &    gud_allomSpectra,
     &    gud_aCarCell,
     &    gud_bCarCell,
     &    gud_absorpSlope,
     &    gud_bbbSlope,
     &    gud_scatSwitchSizeLog,
     &    gud_scatSlopeSmall,
     &    gud_scatSlopeLarge
#endif

#ifdef GUD_ALLOW_CDOM
      NAMELIST/GUD_CDOM_PARAMS/
     &    fracCDOM,
     &    CDOMdegrd,
     &    CDOMbleach,
     &    PARCDOM,
     &    R_NP_CDOM,
     &    R_FeP_CDOM,
     &    R_CP_CDOM,
     &    CDOMcoeff
#endif

      NAMELIST/GUD_DEPENDENT_PARAMS/
     &    kMinFeSed,
     &    kMaxFeSed

CCOG[[[end]]] (checksum: b0ecf950561cc6d7556718d47f6293cd)

CCOG[[[cog
CCOGfor tp,dims,param,pre,post in locals[0]: cog.out('''
CCOG      {tp} {param}{dims}
CCOG'''.format(param=param, tp=tp, dims=dims)[:-1])
CCOGcog.out('\n')
CCOG]]]

      _RL pday
      _RL pyear
CCOG[[[end]]] (checksum: 3378514bd317c97af8d861092c3f4f3c)

CCOG[[[cog
CCOGfor name,(lines,conds,conde) in code.items():
CCOG    cog.out('''
CCOGCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCOGC     {name}
CCOGCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCOG
CCOG'''.format(name=name)[1:])
CCOG    cog.out(conds)
CCOG    cog.out('\n'.join(lines) + '\n')
CCOG    if name.lower() not in noread:
CCOG        cog.out('''
CCOG      READ(UNIT=iUnit, NML={name})
CCOG'''.format(name=name)[:])
CCOG    cog.out(conde)
CCOG    cog.out('\n')
CCOG]]]
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     locals
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      pday = 86400.0 _d 0
      pyear = 360 _d 0 * pday

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     GUD_CONSTANTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      rad2deg = 180 _d 0 / PI

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     CARBON_CONSTANTS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

#ifdef GUD_ALLOW_CARBON
      Pa2Atm  = 1.01325 _d 5
      ptr2mol = 1.0 _d -3                  ! convert ptracers (in mmol/m3) to mol/m3

      ! set up coefficients for DIC chemistry
      ! define Schmidt no. coefficients for CO2
      sca1 = 2073.1 _d 0
      sca2 = -125.62 _d 0
      sca3 =    3.6276 _d 0
      sca4 =   -0.043219 _d 0

      ! define Schmidt no. coefficients for O2
      ! based on Keeling et al [GBC, 12, 141, (1998)]
      sox1 = 1638.0 _d 0
      sox2 =  -81.83 _d 0
      sox3 =    1.483 _d 0
      sox4 =   -0.008004 _d 0

      ! coefficients for determining saturation O2
      oA0 =  2.00907 _d 0
      oA1 =  3.22014 _d 0
      oA2 =  4.05010 _d 0
      oA3 =  4.94457 _d 0
      oA4 = -2.56847 _d -1
      oA5 =  3.88767 _d 0
      oB0 = -6.24523 _d -3
      oB1 = -7.37614 _d -3
      oB2 = -1.03410 _d -2
      oB3 = -8.17083 _d -3
      oC0 = -4.88682 _d -7
#endif

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     GUD_PARAMS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      ! general parameters (same for all plankton)
      gud_seed = 0

      iDEBUG = 1
      jDEBUG = 1
      kDEBUG = 1

      gud_linFSConserve = .FALSE.

      gud_read_phos = .FALSE.

      !_RL phymin = 1 _d -10
      !_RL phymin = 1 _d -50
      !_RL phymin = 1 _d -20
      phymin = 120 _d -20                   ! minimum phyto (below which grazing and mortality doesn't happen)

      katten_w   = 4. _d -2                 ! atten coefficient water(m^-1)
      katten_chl = 4. _d -2                 ! atten coefficient chl ((mmol chl/m3)-1)

      ! par parameters
      parfrac = 0.4 _d 0                    ! fraction Qsw that is PAR
      parconv = 1. _d 0/0.2174 _d 0         ! conversion from W/m2 to uEin/m2/s

      tempnorm     = 0.3 _d 0               ! set temperature function (was 1.0)
      TempAeArr    = -4000.0 _d 0           ! coefficients for TEMP_VERION 2 (pseudo-Arrhenius)
      TemprefArr   = 293.15 _d 0
      TempCoeffArr = 0.5882 _d 0

      alpfe       = 0.04 _d 0               ! solubility of Fe dust
      scav        = 0.4 _d 0/pyear          ! iron chem scavenging rate (s-1)
      ! scav          = 4.4 _d -3/pday          ! for quota model
      ligand_tot  = 1. _d -3                ! total ligand (mol m-3)
      ligand_stab = 2. _d 5                 ! ligand stability rate ratio = [FeL]/[Fe'][L'] (m3 mol-1)
      freefemax   = 0.4 _d -3               ! max free fe (mol m-3)

      scav_rat      = 0.005 _d 0 / pday     ! scavening
      scav_inter    = 0.079 _d 0
      scav_exp      = 0.58 _d 0
      scav_R_POPPOC = 1.1321 _d -4

                                          ! fe sed
      depthfesed    = -1.0 _d 0                    ! depth above which to add sediment source (was -1000)
      fesedflux     = 1.0 _d 0 * 1.0 _d -3 / pday  ! iron flux (mmol/m2/s)
      fesedflux_pcm = 0.68 _d 0 * 1.0 _d -3        ! iron flux (mmol/m3/s) per mmol POC/m3/s
      R_CP_fesed    = 106 _d 0

                                          ! oxidation rates for ammonium and nitrite
      Knita   = 1.0 _d 0/(.50 _d 0*pday)    ! i.e. Knita ...    NH4 -> NO2
      Knitb   = 1.0 _d 0/(10.0 _d 0*pday)   ! i.e. Knitb ...    NO2 -> NO3
      PAR_oxi = 10. _d 0                    ! critical light level (muEin/m2/s) after which oxidation starts

      Kdoc  = 1.0 _d 0/(100.0 _d 0*pday)    ! DOM remin rates
      Kdop  = 1.0 _d 0/(100.0 _d 0*pday)
      Kdon  = 1.0 _d 0/(100.0 _d 0*pday)
      KdoFe = 1.0 _d 0/(100.0 _d 0*pday)

      KPOC  = 1.0 _d 0/(50.0 _d 0*pday)     ! Particulate detritus remin rates
      KPOP  = KPOC                          ! z*                             = wx_sink/Kremin_X
      KPON  = KPOC                          ! for e-folding length scale, z* = 300 m
      KPOFe = KPOC                          ! choose Kremin_X                = 1/30 day-1, wx_sink = 10 m day-1
      KPOSi = 1.0 _d 0/(300.0 _d 0*pday)

      wC_sink  = 10.0 _d 0/pday             ! sinking rate for particulate matter (m/s)
      wP_sink  = wC_sink
      wN_sink  = wC_sink
      wFe_sink = wC_sink
      wSi_sink = wC_sink
      wPIC_sink = 15.0 _d 0/pday

      Kdissc = 1.0 _d 0/(300.0 _d 0*pday)

#ifdef GUD_ALLOW_CARBON
      gud_atmos_pCO2 = 278 _d -6
      R_OP           = 170 _d 0
      R_OC           = 170 _d 0/120.0 _d 0
      m3perkg        = 1. _d 0 / 1024.5 _d 0

      surfSaltMinInit = 4.0 _d 0
      surfSaltMaxInit = 50.0 _d 0
      surfTempMinInit = -4.0 _d 0
      surfTempMaxInit = 39.0 _d 0
      surfDICMinInit = 10.0 _d 0    ! mmol m^-3
      surfDICMaxInit = 4000.0 _d 0  ! mmol m^-3
      surfALKMinInit = 10.0 _d 0    ! mmol m^-3
      surfALKMaxInit = 4000.0 _d 0  ! mmol m^-3
      surfPO4MinInit = 1.0 _d -10   ! mmol m^-3
      surfPO4MaxInit = 10.0 _d 0    ! mmol m^-3
      surfSiMinInit  = 1.0 _d -8    ! mmol m^-3
      surfSiMaxInit  = 500.0 _d 0   ! mmol m^-3

      surfSaltMin = 4.0 _d 0
      surfSaltMax = 50.0 _d 0
      surfTempMin = -4.0 _d 0
      surfTempMax = 39.0 _d 0
      surfDICMin = 400.0 _d 0   ! mmol m^-3
      surfDICMax = 4000.0 _d 0  ! mmol m^-3
      surfALKMin = 400.0 _d 0   ! mmol m^-3
      surfALKMax = 4000.0 _d 0  ! mmol m^-3
      surfPO4Min = 1.0 _d -10   ! mmol m^-3
      surfPO4Max = 10.0 _d 0    ! mmol m^-3
      surfSiMin  = 1.0 _d -8    ! mmol m^-3
      surfSiMax  = 500.0 _d 0   ! mmol m^-3

#endif
      diaz_ini_fac = 1 _d 0                 ! reduce tracer concentrations by this factor on initialization


      ! denitrification

      O2crit    = 6.0 _d 0                  ! critical oxygen for O2/NO3 remineralization (Lipschultz et al 1990, DSR 37, 1513-1541)
      denit_NP  = 120.0 _d 0                ! ratio of n to p in denitrification process
      denit_NO3 = 104.0 _d 0                ! ratio no3 used relative to all n in denitrification process
      NO3crit   = 1. _d -2                  ! critical nitrate below which no denit (or remin) happens

      ! these should probably be traits
                                          ! from quota package
      PARmin    = 0.1 _d 0                  ! minimum light for photosynthesis; for non-Geider: 1.0
      chl2nmax  = 3.00 _d 0                 ! Moore 2002 (labelled as GD98)
      synthcost = 0.0 _d 0                  ! cost of biosynthesis (mmol C/mmol N)
                                          ! 2.33 for quota model

                                          ! new combined parameters
      expPref  = 1.0 _d 0
      expPalat = 1.0 _d 0

      palat_min = 0 _d 0                    ! was 1D-4 in quota; smaller palat are set to 0

      inhib_graz     = 1.0 _d 0             ! for quota-style grazing ((mmol C m-3)-1)
      inhib_graz_exp = 0.0 _d 0             ! exponent 0.0 turns it off

      hillnum  = 1.0 _d 0                   ! exponent for limiting quota uptake in grazing

      hollexp = 1.0 _d 0                    ! grazing exponential 1= holling 2, 2=holling 3

      phygrazmin = 120 _d -10               ! minimum total prey conc


      ! for bacteria

      pmaxPON = 5/pday
      pmaxDON = 5/pday
      pcoefO2 = 290.820D0/pday
      pmaxDIN = 20/pday
      ksatPOM = 1 _d 0          ! mmol N m^-3
      ksatDOM = 1 _d 0          ! mmol N m^-3
      ksatDIN = 0.01 _d 0
      alpha_hydrol = 2.0 _d 0
      yod     = 0.2 _d 0
      yoe     = yod/467*4/(1-yod)*106 _d 0
      ynd     = 0.16 _d 0
      yne     = ynd/467*5/(1-ynd)*106 _d 0
      fnh4    = 0.1 _d 0
      ynh4    = 1/(16+467/6/fnh4)*106 _d 0
      yonh4   = fnh4/467*4/(1-fnh4)*106 _d 0
      fno2    = 0.1 _d 0
      yno2    = 1/(16+563/2/fno2)*106 _d 0
      yono2   = fno2/563*4/(1-fno2)*106 _d 0


      ! TO BE IMPLEMENTED

      depthdenit = 185.0 _d 0               ! depth for denitrification relaxation to start

      READ(UNIT=iUnit, NML=GUD_PARAMS)

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     GUD_RADTRANS_PARAMS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

#ifdef GUD_ALLOW_RADTRANS
      gud_waterAbsorbFile = ' '
      gud_phytoAbsorbFile = ' '
      gud_particleAbsorbFile = ' '

      gud_selectSolz = 0        ! how to compute solar zenith angle, 0: local noon, 1: daytime average, 2: irradiance average

      gud_refract_water = 1.341 _d 0        ! refractive index of seawater
      gud_rmud_max = 1.5 _d 0


      gud_radtrans_kmax = Nr

      gud_part_size_P = 1 _d -15   ! mmol P per particle

      gud_waveband_edges   = -1.0 _d 0
      gud_waveband_centers = -1.0 _d 0          ! representative wavelengths

      gud_radmodThresh = 1 _d -4
      gud_rmus         = 1.0/0.83 _d 0
      gud_rmuu         = 1.0/0.4 _d 0
      gud_bbmin        = 0.0002 _d 0
      gud_bbw          = 0.5 _d 0

      gud_lambda_aCDOM = 450.0 _d 0
      gud_Sdom         = 0.014 _d 0
      gud_aCDOM_fac    = 0.2 _d 0

      ! allometric scaling of spectra
      gud_allomSpectra = .FALSE.
      gud_aCarCell       = 0.109 _d -9           ! mg C per cell (from Montagnes et al 1994)
      gud_bCarCell       = 0.991 _d 0
      gud_absorpSlope    =-0.075 _d 0            ! slope for scaled absorption spectra
      gud_bbbSlope       =-1.458 _d 0
      gud_scatSwitchSizeLog = 0. _d 0
      gud_scatSlopeSmall = 1.5 _d 0
      gud_scatSlopeLarge = 1.5 _d 0

      READ(UNIT=iUnit, NML=GUD_RADTRANS_PARAMS)
#endif

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     GUD_CDOM_PARAMS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

#ifdef GUD_ALLOW_CDOM
      fracCDOM   = 2. _d 0 / 100. _d 0
      CDOMdegrd  = 1. _d 0 / (200 _d 0*pday)
      CDOMbleach = 1. _d 0 / (15 _d 0*pday)
      PARCDOM    = 20. _d 0
      R_NP_CDOM  = 16. _d 0
      R_FeP_CDOM = 1. _d -3
      R_CP_CDOM  = 120. _d 0
      CDOMcoeff  = .1 _d -1  / 1. _d -4

      READ(UNIT=iUnit, NML=GUD_CDOM_PARAMS)
#endif

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     GUD_DEPENDENT_PARAMS
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      ! dependent parameters (computed here or in gud_init_fixed)
      kMinFeSed = 1
      kMaxFeSed = 0

CCOG[[[end]]] (checksum: f9dad7732d81cf74aba641857af8911d)



CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     log all parameters to a namelist file

      IF ( oUnit .GE. 0 ) THEN
CCOG[[[cog
CCOGfor name,(nml,conds,conde) in coms.items():
CCOG    cog.out(conds)
CCOG    cog.out('''
CCOG       WRITE(UNIT=oUnit, NML={name})
CCOG    '''.format(name=name)[1:-4])
CCOG    cog.out(conde)
CCOG]]]
       WRITE(UNIT=oUnit, NML=GUD_CONSTANTS)
#ifdef GUD_ALLOW_CARBON
       WRITE(UNIT=oUnit, NML=CARBON_CONSTANTS)
#endif
       WRITE(UNIT=oUnit, NML=GUD_PARAMS)
#ifdef GUD_ALLOW_RADTRANS
       WRITE(UNIT=oUnit, NML=GUD_RADTRANS_PARAMS)
#endif
#ifdef GUD_ALLOW_CDOM
       WRITE(UNIT=oUnit, NML=GUD_CDOM_PARAMS)
#endif
       WRITE(UNIT=oUnit, NML=GUD_DEPENDENT_PARAMS)
CCOG[[[end]]] (checksum: f77a623ac446da4cd3107320679e5ad3)
      ENDIF

#endif /* ALLOW_GUD */

      RETURN
      END
