C This file contains cog templates.
C Code between template and end marker is autogenerated.
C Add new forcing fields to exfflds in exf.py
C
CCOG[[[cog import cog; from exf import *]]]
CCOG[[[end]]] (checksum: d41d8cd98f00b204e9800998ecf8427e)

#ifdef ALLOW_GUD

CBOP
C     !ROUTINE: GUD_EXF.h
C     !INTERFACE:
C #include GUD_EXF.h

C     !DESCRIPTION:
C Contains fields for gud package read through exf
C
C Requires: SIZE.h
C Requires: EXF_PARAM.h
C Requires: GUD_SIZE.h

      COMMON/gud_forcing_params_l/
     &    usegudYearlyFields,
     &    gud_chlInitBalanced,
     &    gud_loadFieldsEarly

      LOGICAL usegudYearlyFields
      LOGICAL gud_chlInitBalanced
      LOGICAL gud_loadFieldsEarly

      COMMON/gud_forcing_params_i/
     &    gud_chlIter0

      INTEGER gud_chlIter0

      COMMON /gud_fields_r/
#ifdef GUD_ALLOW_RADTRANS
     &    OASIM_Ed0, OASIM_Ed1, OASIM_Ed,
     &    OASIM_Es0, OASIM_Es1, OASIM_Es,
#endif
CCOG[[[cog
CCOGcog.out(',\n'.join('''
CCOG     &    {pre}0, {pre}1, {fld}
CCOG'''.format(pre=pre, fld=fld)[1:-1] for fld,pre in exfflds))
CCOG]]]
     &    PAR0, PAR1, surfPAR,
     &    iron0, iron1, inputFe,
     &    ice0, ice1, iceFrac,
     &    wind0, wind1, windSpeed,
     &    pCO20, pCO21, atmospCO2
CCOG[[[end]]] (checksum: df5cf3d003dcf8b61668cf68aa030735)

#ifdef GUD_ALLOW_RADTRANS
      _RL OASIM_Ed0(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy,nlam)
      _RL OASIM_Ed1(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy,nlam)
      _RL OASIM_Ed(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy,nlam)

      _RL OASIM_Es0(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy,nlam)
      _RL OASIM_Es1(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy,nlam)
      _RL OASIM_Es(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy,nlam)
#endif
CCOG[[[cog
CCOGfor fld,pre in exfflds: cog.out('''
CCOG      _RL {pre}0(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy)
CCOG      _RL {pre}1(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy)
CCOG      _RL {fld}(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy)
CCOG'''.format(pre=pre, fld=fld))
CCOG]]]

      _RL PAR0(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy)
      _RL PAR1(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy)
      _RL surfPAR(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy)

      _RL iron0(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy)
      _RL iron1(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy)
      _RL inputFe(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy)

      _RL ice0(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy)
      _RL ice1(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy)
      _RL iceFrac(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy)

      _RL wind0(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy)
      _RL wind1(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy)
      _RL windSpeed(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy)

      _RL pCO20(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy)
      _RL pCO21(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy)
      _RL atmospCO2(1-OLx:sNx+OLx,1-OLy:sNy+OLy,nSx,nSy)
CCOG[[[end]]] (checksum: aac1c777edd4ec2cb25c3a0c8c6034c7)

#ifdef GUD_ALLOW_RADTRANS
C OASIM forcing parameters for exf

      _RL OASIMStartTime

      COMMON/gud_forcing_OASIM_c/
     &    OASIMmask, OASIM_EdFile, OASIM_EsFile
      COMMON/gud_forcing_OASIM_i/
     &    OASIMstartdate1, OASIMstartdate2
      COMMON/gud_forcing_OASIM_r/
     &    OASIMStartTime,
     &    OASIMperiod, OASIMconst,
     &    OASIM_exfremo_intercept, OASIM_exfremo_slope,
     &    gud_inscal_OASIM
      CHARACTER*128  OASIM_EdFile(nlam)
      CHARACTER*128  OASIM_EsFile(nlam)
      CHARACTER*1 OASIMmask
      INTEGER OASIMstartdate1
      INTEGER OASIMstartdate2
      _RL OASIMperiod
      _RL OASIMconst
      _RL OASIM_exfremo_intercept
      _RL OASIM_exfremo_slope
      _RL gud_inscal_OASIM(nlam)

#ifdef USE_EXF_INTERPOLATION
      COMMON/gud_interp_OASIM_i/
     &    OASIM_nlon, OASIM_nlat, OASIM_interpMethod
      COMMON/gud_interp_OASIM_r/
     &    OASIM_lon0, OASIM_lat0, OASIM_lon_inc, OASIM_lat_inc
      INTEGER OASIM_interpMethod, OASIM_nlon, OASIM_nlat
      _RL  OASIM_lon0
      _RL  OASIM_lat0
      _RL  OASIM_lon_inc
      _RL  OASIM_lat_inc(MAX_LAT_INC)
#endif
#endif
CCOG[[[cog
CCOGfor fld,pre in exfflds: cog.out('''
CCOGC {pre} forcing parameters for exf
CCOG
CCOG      _RL {pre}StartTime
CCOG
CCOG      COMMON/gud_forcing_{pre}_c/
CCOG     &    {pre}mask, {pre}file
CCOG      COMMON/gud_forcing_{pre}_i/
CCOG     &    {pre}startdate1, {pre}startdate2
CCOG      COMMON/gud_forcing_{pre}_r/
CCOG     &    {pre}StartTime,
CCOG     &    {pre}period, {pre}const,
CCOG     &    {pre}_exfremo_intercept, {pre}_exfremo_slope,
CCOG     &    gud_inscal_{pre}
CCOG      CHARACTER*128  {pre}file
CCOG      CHARACTER*1 {pre}mask
CCOG      INTEGER {pre}startdate1
CCOG      INTEGER {pre}startdate2
CCOG      _RL {pre}period
CCOG      _RL {pre}const
CCOG      _RL {pre}_exfremo_intercept
CCOG      _RL {pre}_exfremo_slope
CCOG      _RL gud_inscal_{pre}
CCOG
CCOG#ifdef USE_EXF_INTERPOLATION
CCOG      COMMON/gud_interp_{pre}_i/
CCOG     &    {pre}_nlon, {pre}_nlat, {pre}_interpMethod
CCOG      COMMON/gud_interp_{pre}_r/
CCOG     &    {pre}_lon0, {pre}_lat0, {pre}_lon_inc, {pre}_lat_inc
CCOG      INTEGER {pre}_interpMethod, {pre}_nlon, {pre}_nlat
CCOG      _RL  {pre}_lon0
CCOG      _RL  {pre}_lat0
CCOG      _RL  {pre}_lon_inc
CCOG      _RL  {pre}_lat_inc(MAX_LAT_INC)
CCOG#endif
CCOG'''.format(pre=pre, fld=fld))
CCOG]]]

C PAR forcing parameters for exf

      _RL PARStartTime

      COMMON/gud_forcing_PAR_c/
     &    PARmask, PARfile
      COMMON/gud_forcing_PAR_i/
     &    PARstartdate1, PARstartdate2
      COMMON/gud_forcing_PAR_r/
     &    PARStartTime,
     &    PARperiod, PARconst,
     &    PAR_exfremo_intercept, PAR_exfremo_slope,
     &    gud_inscal_PAR
      CHARACTER*128  PARfile
      CHARACTER*1 PARmask
      INTEGER PARstartdate1
      INTEGER PARstartdate2
      _RL PARperiod
      _RL PARconst
      _RL PAR_exfremo_intercept
      _RL PAR_exfremo_slope
      _RL gud_inscal_PAR

#ifdef USE_EXF_INTERPOLATION
      COMMON/gud_interp_PAR_i/
     &    PAR_nlon, PAR_nlat, PAR_interpMethod
      COMMON/gud_interp_PAR_r/
     &    PAR_lon0, PAR_lat0, PAR_lon_inc, PAR_lat_inc
      INTEGER PAR_interpMethod, PAR_nlon, PAR_nlat
      _RL  PAR_lon0
      _RL  PAR_lat0
      _RL  PAR_lon_inc
      _RL  PAR_lat_inc(MAX_LAT_INC)
#endif

C iron forcing parameters for exf

      _RL ironStartTime

      COMMON/gud_forcing_iron_c/
     &    ironmask, ironfile
      COMMON/gud_forcing_iron_i/
     &    ironstartdate1, ironstartdate2
      COMMON/gud_forcing_iron_r/
     &    ironStartTime,
     &    ironperiod, ironconst,
     &    iron_exfremo_intercept, iron_exfremo_slope,
     &    gud_inscal_iron
      CHARACTER*128  ironfile
      CHARACTER*1 ironmask
      INTEGER ironstartdate1
      INTEGER ironstartdate2
      _RL ironperiod
      _RL ironconst
      _RL iron_exfremo_intercept
      _RL iron_exfremo_slope
      _RL gud_inscal_iron

#ifdef USE_EXF_INTERPOLATION
      COMMON/gud_interp_iron_i/
     &    iron_nlon, iron_nlat, iron_interpMethod
      COMMON/gud_interp_iron_r/
     &    iron_lon0, iron_lat0, iron_lon_inc, iron_lat_inc
      INTEGER iron_interpMethod, iron_nlon, iron_nlat
      _RL  iron_lon0
      _RL  iron_lat0
      _RL  iron_lon_inc
      _RL  iron_lat_inc(MAX_LAT_INC)
#endif

C ice forcing parameters for exf

      _RL iceStartTime

      COMMON/gud_forcing_ice_c/
     &    icemask, icefile
      COMMON/gud_forcing_ice_i/
     &    icestartdate1, icestartdate2
      COMMON/gud_forcing_ice_r/
     &    iceStartTime,
     &    iceperiod, iceconst,
     &    ice_exfremo_intercept, ice_exfremo_slope,
     &    gud_inscal_ice
      CHARACTER*128  icefile
      CHARACTER*1 icemask
      INTEGER icestartdate1
      INTEGER icestartdate2
      _RL iceperiod
      _RL iceconst
      _RL ice_exfremo_intercept
      _RL ice_exfremo_slope
      _RL gud_inscal_ice

#ifdef USE_EXF_INTERPOLATION
      COMMON/gud_interp_ice_i/
     &    ice_nlon, ice_nlat, ice_interpMethod
      COMMON/gud_interp_ice_r/
     &    ice_lon0, ice_lat0, ice_lon_inc, ice_lat_inc
      INTEGER ice_interpMethod, ice_nlon, ice_nlat
      _RL  ice_lon0
      _RL  ice_lat0
      _RL  ice_lon_inc
      _RL  ice_lat_inc(MAX_LAT_INC)
#endif

C wind forcing parameters for exf

      _RL windStartTime

      COMMON/gud_forcing_wind_c/
     &    windmask, windfile
      COMMON/gud_forcing_wind_i/
     &    windstartdate1, windstartdate2
      COMMON/gud_forcing_wind_r/
     &    windStartTime,
     &    windperiod, windconst,
     &    wind_exfremo_intercept, wind_exfremo_slope,
     &    gud_inscal_wind
      CHARACTER*128  windfile
      CHARACTER*1 windmask
      INTEGER windstartdate1
      INTEGER windstartdate2
      _RL windperiod
      _RL windconst
      _RL wind_exfremo_intercept
      _RL wind_exfremo_slope
      _RL gud_inscal_wind

#ifdef USE_EXF_INTERPOLATION
      COMMON/gud_interp_wind_i/
     &    wind_nlon, wind_nlat, wind_interpMethod
      COMMON/gud_interp_wind_r/
     &    wind_lon0, wind_lat0, wind_lon_inc, wind_lat_inc
      INTEGER wind_interpMethod, wind_nlon, wind_nlat
      _RL  wind_lon0
      _RL  wind_lat0
      _RL  wind_lon_inc
      _RL  wind_lat_inc(MAX_LAT_INC)
#endif

C pCO2 forcing parameters for exf

      _RL pCO2StartTime

      COMMON/gud_forcing_pCO2_c/
     &    pCO2mask, pCO2file
      COMMON/gud_forcing_pCO2_i/
     &    pCO2startdate1, pCO2startdate2
      COMMON/gud_forcing_pCO2_r/
     &    pCO2StartTime,
     &    pCO2period, pCO2const,
     &    pCO2_exfremo_intercept, pCO2_exfremo_slope,
     &    gud_inscal_pCO2
      CHARACTER*128  pCO2file
      CHARACTER*1 pCO2mask
      INTEGER pCO2startdate1
      INTEGER pCO2startdate2
      _RL pCO2period
      _RL pCO2const
      _RL pCO2_exfremo_intercept
      _RL pCO2_exfremo_slope
      _RL gud_inscal_pCO2

#ifdef USE_EXF_INTERPOLATION
      COMMON/gud_interp_pCO2_i/
     &    pCO2_nlon, pCO2_nlat, pCO2_interpMethod
      COMMON/gud_interp_pCO2_r/
     &    pCO2_lon0, pCO2_lat0, pCO2_lon_inc, pCO2_lat_inc
      INTEGER pCO2_interpMethod, pCO2_nlon, pCO2_nlat
      _RL  pCO2_lon0
      _RL  pCO2_lat0
      _RL  pCO2_lon_inc
      _RL  pCO2_lat_inc(MAX_LAT_INC)
#endif
CCOG[[[end]]] (checksum: 56e650944fca2573581e90c56aae1c28)
CEOP

#endif /* ALLOW_GUD */

