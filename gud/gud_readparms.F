C This file contains cog templates.
C Code between template and end marker is autogenerated.
C Add new forcing fields to exfflds in exf.py
C
CCOG[[[cog import cog; from exf import *]]]
CCOG[[[end]]] (checksum: d41d8cd98f00b204e9800998ecf8427e)

#include "GUD_OPTIONS.h"
#include "EXF_OPTIONS.h"

CBOP
C !ROUTINE: GUD_READPARMS

C !INTERFACE: ==========================================================
      SUBROUTINE GUD_READPARMS( myThid )

C !DESCRIPTION:
C     Initialize GUD parameters, read in data.gud

C !USES: ===============================================================
      IMPLICIT NONE
#include "EEPARAMS.h"
#include "SIZE.h"
#include "PARAMS.h"
#ifdef ALLOW_EXCH2
#include "W2_EXCH2_SIZE.h"
#include "W2_EXCH2_TOPOLOGY.h"
#endif
#ifdef ALLOW_GCHEM
#include "GCHEM.h"
#endif
#ifdef ALLOW_EXF
#ifdef USE_EXF_INTERPOLATION
#include "SET_GRID.h"
#include "EXF_CONSTANTS.h"
#endif
#include "EXF_PARAM.h"
#endif
#include "GUD_SIZE.h"
#include "GUD_EXF.h"

C !INPUT PARAMETERS: ===================================================
C  myThid               :: thread number
      INTEGER myThid

C !OUTPUT PARAMETERS: ==================================================
C  none
CEOP

#ifdef ALLOW_GUD

C !LOCAL VARIABLES: ====================================================
C  iUnit   :: unit number for I/O
C  msgBuf  :: message buffer
      _RL inp_lon0, inp_lat0, inp_dLon, inp_dLat, gridNx, gridNy
      integer iUnit, oUnit, l
      CHARACTER*(MAX_LEN_MBUF) msgBuf

      NAMELIST/gud_forcing_params/
     &    useGudYearlyFields,
     &    gud_chlInitBalanced,
     &    gud_chlIter0,
#ifdef GUD_ALLOW_RADTRANS
C
     &    OASIM_Edfile,
     &    OASIM_Esfile,
     &    OASIMperiod,
     &    OASIMStartTime,
     &    OASIMstartdate1,
     &    OASIMstartdate2,
     &    OASIMconst,
     &    OASIM_exfremo_intercept,
     &    OASIM_exfremo_slope,
     &    OASIMmask,
     &    gud_inscal_OASIM,
#endif
CCOG[[[cog
CCOGcog.out(',\n'.join('''
CCOGC
CCOG     &    {pre}file,
CCOG     &    {pre}period,
CCOG     &    {pre}StartTime,
CCOG     &    {pre}startdate1,
CCOG     &    {pre}startdate2,
CCOG     &    {pre}const,
CCOG     &    {pre}_exfremo_intercept,
CCOG     &    {pre}_exfremo_slope,
CCOG     &    {pre}mask,
CCOG     &    gud_inscal_{pre}
CCOG'''.format(pre=pre, fld=fld)[1:-1] for fld,pre in exfflds))
CCOG]]]
C
     &    PARfile,
     &    PARperiod,
     &    PARStartTime,
     &    PARstartdate1,
     &    PARstartdate2,
     &    PARconst,
     &    PAR_exfremo_intercept,
     &    PAR_exfremo_slope,
     &    PARmask,
     &    gud_inscal_PAR,
C
     &    ironfile,
     &    ironperiod,
     &    ironStartTime,
     &    ironstartdate1,
     &    ironstartdate2,
     &    ironconst,
     &    iron_exfremo_intercept,
     &    iron_exfremo_slope,
     &    ironmask,
     &    gud_inscal_iron,
C
     &    icefile,
     &    iceperiod,
     &    iceStartTime,
     &    icestartdate1,
     &    icestartdate2,
     &    iceconst,
     &    ice_exfremo_intercept,
     &    ice_exfremo_slope,
     &    icemask,
     &    gud_inscal_ice,
C
     &    windfile,
     &    windperiod,
     &    windStartTime,
     &    windstartdate1,
     &    windstartdate2,
     &    windconst,
     &    wind_exfremo_intercept,
     &    wind_exfremo_slope,
     &    windmask,
     &    gud_inscal_wind,
C
     &    pCO2file,
     &    pCO2period,
     &    pCO2StartTime,
     &    pCO2startdate1,
     &    pCO2startdate2,
     &    pCO2const,
     &    pCO2_exfremo_intercept,
     &    pCO2_exfremo_slope,
     &    pCO2mask,
     &    gud_inscal_pCO2
CCOG[[[end]]] (checksum: 5fd2433c87ac1d9fc1d9011756afcff9)

#ifdef USE_EXF_INTERPOLATION
      NAMELIST/gud_interp_params/
#ifdef GUD_ALLOW_RADTRANS
C
     &    OASIM_lon0,
     &    OASIM_lat0,
     &    OASIM_nlon,
     &    OASIM_nlat,
     &    OASIM_lon_inc,
     &    OASIM_interpMethod,
     &    OASIM_lat_inc,
#endif
CCOG[[[cog
CCOGcog.out(',\n'.join('''
CCOGC
CCOG     &    {pre}_lon0,
CCOG     &    {pre}_lat0,
CCOG     &    {pre}_nlon,
CCOG     &    {pre}_nlat,
CCOG     &    {pre}_lon_inc,
CCOG     &    {pre}_interpMethod,
CCOG     &    {pre}_lat_inc
CCOG'''.format(pre=pre, fld=fld)[1:-1] for fld,pre in exfflds))
CCOG]]]
C
     &    PAR_lon0,
     &    PAR_lat0,
     &    PAR_nlon,
     &    PAR_nlat,
     &    PAR_lon_inc,
     &    PAR_interpMethod,
     &    PAR_lat_inc,
C
     &    iron_lon0,
     &    iron_lat0,
     &    iron_nlon,
     &    iron_nlat,
     &    iron_lon_inc,
     &    iron_interpMethod,
     &    iron_lat_inc,
C
     &    ice_lon0,
     &    ice_lat0,
     &    ice_nlon,
     &    ice_nlat,
     &    ice_lon_inc,
     &    ice_interpMethod,
     &    ice_lat_inc,
C
     &    wind_lon0,
     &    wind_lat0,
     &    wind_nlon,
     &    wind_nlat,
     &    wind_lon_inc,
     &    wind_interpMethod,
     &    wind_lat_inc,
C
     &    pCO2_lon0,
     &    pCO2_lat0,
     &    pCO2_nlon,
     &    pCO2_nlat,
     &    pCO2_lon_inc,
     &    pCO2_interpMethod,
     &    pCO2_lat_inc
CCOG[[[end]]] (checksum: 5dce0ae680576db7c730223e134dd2fd)
#endif

C Open and read the data.gud file

      _BEGIN_MASTER(myThid)

      useGudYearlyFields = useExfYearlyFields
      gud_chlInitBalanced = .FALSE.
      gud_chlIter0 = 0

#ifdef GUD_ALLOW_RADTRANS
      DO l = 1, nlam
       OASIM_Edfile(l) = ' '
       OASIM_Esfile(l) = ' '
       gud_inscal_OASIM(l) = 1. _d 0
      ENDDO
      OASIMperiod             = 0.0 _d 0
      OASIMStartTime          = UNSET_RL
      OASIMstartdate1         = 0
      OASIMstartdate2         = 0
      OASIMconst              = 0.0 _d 0
      OASIM_exfremo_intercept = 0.0 _d 0
      OASIM_exfremo_slope     = 0.0 _d 0
      OASIMmask = 'c'
#endif
CCOG[[[cog
CCOGfor fld,pre in exfflds: cog.out('''
CCOG      {pre}file = ' '
CCOG      {pre}period             = 0.0 _d 0
CCOG      {pre}StartTime          = UNSET_RL
CCOG      {pre}startdate1         = 0
CCOG      {pre}startdate2         = 0
CCOG      {pre}const              = 0.0 _d 0
CCOG      {pre}_exfremo_intercept = 0.0 _d 0
CCOG      {pre}_exfremo_slope     = 0.0 _d 0
CCOG      {pre}mask = 'c'
CCOG
CCOG      gud_inscal_{pre}    =  1. _d 0
CCOG'''.format(pre=pre, fld=fld))
CCOG]]]

      PARfile = ' '
      PARperiod             = 0.0 _d 0
      PARStartTime          = UNSET_RL
      PARstartdate1         = 0
      PARstartdate2         = 0
      PARconst              = 0.0 _d 0
      PAR_exfremo_intercept = 0.0 _d 0
      PAR_exfremo_slope     = 0.0 _d 0
      PARmask = 'c'

      gud_inscal_PAR    =  1. _d 0

      ironfile = ' '
      ironperiod             = 0.0 _d 0
      ironStartTime          = UNSET_RL
      ironstartdate1         = 0
      ironstartdate2         = 0
      ironconst              = 0.0 _d 0
      iron_exfremo_intercept = 0.0 _d 0
      iron_exfremo_slope     = 0.0 _d 0
      ironmask = 'c'

      gud_inscal_iron    =  1. _d 0

      icefile = ' '
      iceperiod             = 0.0 _d 0
      iceStartTime          = UNSET_RL
      icestartdate1         = 0
      icestartdate2         = 0
      iceconst              = 0.0 _d 0
      ice_exfremo_intercept = 0.0 _d 0
      ice_exfremo_slope     = 0.0 _d 0
      icemask = 'c'

      gud_inscal_ice    =  1. _d 0

      windfile = ' '
      windperiod             = 0.0 _d 0
      windStartTime          = UNSET_RL
      windstartdate1         = 0
      windstartdate2         = 0
      windconst              = 0.0 _d 0
      wind_exfremo_intercept = 0.0 _d 0
      wind_exfremo_slope     = 0.0 _d 0
      windmask = 'c'

      gud_inscal_wind    =  1. _d 0

      pCO2file = ' '
      pCO2period             = 0.0 _d 0
      pCO2StartTime          = UNSET_RL
      pCO2startdate1         = 0
      pCO2startdate2         = 0
      pCO2const              = 0.0 _d 0
      pCO2_exfremo_intercept = 0.0 _d 0
      pCO2_exfremo_slope     = 0.0 _d 0
      pCO2mask = 'c'

      gud_inscal_pCO2    =  1. _d 0
CCOG[[[end]]] (checksum: a8026297823fc248c485948eef737bca)

#ifdef USE_EXF_INTERPOLATION
      inp_lon0 = xgOrigin + delX(1)*exf_half
      inp_lat0 = ygOrigin + delY(1)*exf_half
      inp_dLon = delX(1)
      inp_dLat = delY(1)
# ifdef ALLOW_EXCH2
      gridNx = exch2_mydNx(1)
      gridNy = exch2_mydNy(1)
# else /* ALLOW_EXCH2 */
      gridNx = Nx
      gridNy = Ny
# endif /* ALLOW_EXCH2 */

#ifdef GUD_ALLOW_RADTRANS
      OASIM_lon0 = inp_lon0
      OASIM_lat0 = inp_lat0
      OASIM_nlon = gridNx
      OASIM_nlat = gridNy
      OASIM_lon_inc = inp_dLon
      OASIM_interpMethod  = 1
      OASIM_lat_inc(:) = inp_dLat
#endif
CCOG[[[cog
CCOGfor fld,pre in exfflds: cog.out('''
CCOG      {pre}_lon0 = inp_lon0
CCOG      {pre}_lat0 = inp_lat0
CCOG      {pre}_nlon = gridNx
CCOG      {pre}_nlat = gridNy
CCOG      {pre}_lon_inc = inp_dLon
CCOG      {pre}_interpMethod  = 1
CCOG      {pre}_lat_inc(:) = inp_dLat
CCOG'''.format(pre=pre, fld=fld))
CCOG]]]

      PAR_lon0 = inp_lon0
      PAR_lat0 = inp_lat0
      PAR_nlon = gridNx
      PAR_nlat = gridNy
      PAR_lon_inc = inp_dLon
      PAR_interpMethod  = 1
      PAR_lat_inc(:) = inp_dLat

      iron_lon0 = inp_lon0
      iron_lat0 = inp_lat0
      iron_nlon = gridNx
      iron_nlat = gridNy
      iron_lon_inc = inp_dLon
      iron_interpMethod  = 1
      iron_lat_inc(:) = inp_dLat

      ice_lon0 = inp_lon0
      ice_lat0 = inp_lat0
      ice_nlon = gridNx
      ice_nlat = gridNy
      ice_lon_inc = inp_dLon
      ice_interpMethod  = 1
      ice_lat_inc(:) = inp_dLat

      wind_lon0 = inp_lon0
      wind_lat0 = inp_lat0
      wind_nlon = gridNx
      wind_nlat = gridNy
      wind_lon_inc = inp_dLon
      wind_interpMethod  = 1
      wind_lat_inc(:) = inp_dLat

      pCO2_lon0 = inp_lon0
      pCO2_lat0 = inp_lat0
      pCO2_nlon = gridNx
      pCO2_nlat = gridNy
      pCO2_lon_inc = inp_dLon
      pCO2_interpMethod  = 1
      pCO2_lat_inc(:) = inp_dLat
CCOG[[[end]]] (checksum: 2978b780521f5fda098be9a3e78ade77)
#endif /* USE_EXF_INTERPOLATION */

      WRITE(msgBuf,'(A)') ' GUD_READPARMS: opening data.gud'
      CALL PRINT_MESSAGE(msgBuf, standardMessageUnit,
     &                   SQUEEZE_RIGHT , 1)

      CALL OPEN_COPY_DATA_FILE(
     I                   'data.gud', 'GUD_READPARMS',
     O                   iUnit,
     I                   myThid )

      READ(UNIT=iUnit, NML=gud_forcing_params)
#ifdef USE_EXF_INTERPOLATION
      READ(UNIT=iUnit, NML=gud_interp_params)
#endif

C ======================================================================
C     compute dependent parameters
      gud_loadFieldsEarly = gud_chlInitBalanced .AND.
     &                         nIter0 .EQ. gud_chlIter0

C ======================================================================
      IF ( myProcId.EQ.0 .AND. myThid.EQ.1 ) THEN
        CALL MDSFINDUNIT( oUnit, mythid )
        open(oUnit,file='gud_params.txt',status='unknown')
      ELSE
        oUnit = -1
      ENDIF

      CALL GUD_READGENPARAMS(iUnit, oUnit, myThid)
      CALL GUD_READTRAITPARAMS(iUnit, oUnit, myThid)

      IF ( oUnit .GE. 0 ) THEN
        close(oUnit)
      ENDIF
      CLOSE(iUnit)

      WRITE(msgBuf,'(A)') ' ==================================='
      CALL PRINT_MESSAGE( msgBuf, standardMessageUnit,
     &                    SQUEEZE_RIGHT, myThid )

      _END_MASTER(myThid)

C Everyone else must wait for the parameters to be loaded
      _BARRIER

#endif /* ALLOW_GUD */

      RETURN
      END

